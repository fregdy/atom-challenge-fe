/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { taskControllerCreateTask } from '../fn/task/task-controller-create-task';
import { TaskControllerCreateTask$Params } from '../fn/task/task-controller-create-task';
import { taskControllerDeleteTask } from '../fn/task/task-controller-delete-task';
import { TaskControllerDeleteTask$Params } from '../fn/task/task-controller-delete-task';
import { taskControllerGetAllTasks } from '../fn/task/task-controller-get-all-tasks';
import { TaskControllerGetAllTasks$Params } from '../fn/task/task-controller-get-all-tasks';
import { taskControllerUpdateTask } from '../fn/task/task-controller-update-task';
import { TaskControllerUpdateTask$Params } from '../fn/task/task-controller-update-task';
import { TaskDto } from '../models/task-dto';

@Injectable({ providedIn: 'root' })
export class TaskService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `taskControllerGetAllTasks()` */
  static readonly TaskControllerGetAllTasksPath = '/task';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerGetAllTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerGetAllTasks$Response(params?: TaskControllerGetAllTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskDto>>> {
    return taskControllerGetAllTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerGetAllTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerGetAllTasks(params?: TaskControllerGetAllTasks$Params, context?: HttpContext): Observable<Array<TaskDto>> {
    return this.taskControllerGetAllTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskDto>>): Array<TaskDto> => r.body)
    );
  }

  /** Path part for operation `taskControllerCreateTask()` */
  static readonly TaskControllerCreateTaskPath = '/task';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerCreateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerCreateTask$Response(params: TaskControllerCreateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerCreateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerCreateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerCreateTask(params: TaskControllerCreateTask$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerCreateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerUpdateTask()` */
  static readonly TaskControllerUpdateTaskPath = '/task/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerUpdateTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerUpdateTask$Response(params: TaskControllerUpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerUpdateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerUpdateTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerUpdateTask(params: TaskControllerUpdateTask$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerUpdateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerDeleteTask()` */
  static readonly TaskControllerDeleteTaskPath = '/task/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerDeleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerDeleteTask$Response(params: TaskControllerDeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return taskControllerDeleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerDeleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerDeleteTask(params: TaskControllerDeleteTask$Params, context?: HttpContext): Observable<void> {
    return this.taskControllerDeleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
